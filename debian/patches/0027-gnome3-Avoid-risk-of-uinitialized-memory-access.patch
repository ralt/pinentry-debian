From: Daniel Kahn Gillmor <dkg@fifthhorseman.net>
Date: Sat, 5 Nov 2016 17:53:47 -0400
Subject: gnome3: Avoid risk of uinitialized memory access.

* gnome3/pinentry-gnome3.c (_propagate_g_error_to_pinentry): Ensure
that pinentry->specific_err_info is null-terminated.

--

It's possible that "%d: %s" ends up producing more than 20 additional
characters.  A 64-bit signed int at its minimum is
"-9223372036854775808", which is 20 characters.  On any platform where
gint is 128-bit (i don't know whether they exist), it could be
significantly more.

snprintf doesn't write the final NUL byte if the string exceeds the
buffer, so anyone reading specific_err_info as a NUL-terminated string
in such a case would go on to read uninitialized memory after the
buffer.  So we should force there to always be a NUL char after the
written buffer.  It would be simpler to use asprintf, but i suspect
that's not portable enough for use in pinentry.

Signed-off-by: Daniel Kahn Gillmor <dkg@fifthhorseman.net>
Signed-off-by: Neal H. Walfield <neal@g10code.com>
---
 gnome3/pinentry-gnome3.c | 23 ++++++++++++++++++-----
 1 file changed, 18 insertions(+), 5 deletions(-)

diff --git a/gnome3/pinentry-gnome3.c b/gnome3/pinentry-gnome3.c
index e06885e..f9c9262 100644
--- a/gnome3/pinentry-gnome3.c
+++ b/gnome3/pinentry-gnome3.c
@@ -93,13 +93,26 @@ static void
 _propagate_g_error_to_pinentry (pinentry_t pe, GError *error,
                                 gpg_err_code_t code, const char *loc)
 {
-  size_t infolen = strlen(error->message) + 20;
+  char *t;
+
+  /* We can't return the result of g_strdup_printf directly, because
+   * this needs to be g_free'd, but the users of PE (e.g.,
+   * pinentry_reset in pinentry/pinentry.c) use free.  */
+  t = g_strdup_printf ("%d: %s", error->code, error->message);
+  if (t)
+    {
+      /* If strdup fails, then PE->SPECIFIC_ERR_INFO will be NULL,
+       * which is exactly what we want if strdup fails.  So, there is
+       * no need to check for failure.  */
+      pe->specific_err_info = strdup (t);
+      g_free (t);
+    }
+  else
+    {
+      pe->specific_err_info = NULL;
+    }
 
   pe->specific_err = gpg_error (code);
-  pe->specific_err_info = malloc (infolen);
-  if (pe->specific_err_info)
-    snprintf (pe->specific_err_info, infolen,
-              "%d: %s", error->code, error->message);
   pe->specific_err_loc = loc;
 }
 
